#!/bin/bash

# Author: Nick Stokoe
#
# For usage, execute with no parameters, or see the `usage` function
# below.

PROJECT_URL=https://github.com/wu-lee/gpgwrapper

set -o pipefail
set -o errexit

# Defaults

# Note: we need gpg >= v2.1.11 for it's --pinentry-mode option.  Gpg
# will fail immediately if that is not supported. However, some
# systems we use install both as gpg and gpg2, so we try to avoid
# instant failure on these.
GPG=/usr/bin/gpg2 # Prefer this.
[[ -f "$GPG" ]] || GPG=/usr/bin/gpg # Fall back to this.

COMMON="--exit-on-status-write-error --no-tty --batch --trust-model always --pinentry-mode loopback"
MKDIR=/bin/mkdir
CHMOD=/bin/chmod
CHOWN=/bin/chown

# Write to stderr
function warn() {
    printf "%s\n" "$*" >&2
}

# Exit with a nonzero code, printing the arguments on stderr
function die() {
    warn "exiting: $*" >&2
    exit 1
}

# We use this to avoid the use of `cat`.  Works much the same.
function copyout() {
    while IFS='' read -r line; do
        printf "%s\n" "$line"
    done
}

# Versioning.
VERSION=0.2.0
GNUPG_VERSION=$("$GPG" --version) ||
    die "Failed to get gpg version. Is $GPG installed?"

# sethome <dir> - sets the GNUPGHOME environment variable
function sethome() {
    local keyhome=${1?you must supply a keyhome directory}
    [[ -d "$keyhome" ]] || {
        "$MKDIR" -p "$keyhome" || die "cannot create keychain directory"
        
        # Work around issues with gpg-agent < 2.1.12 not enabling loopback.
        # See https://lists.gnupg.org/pipermail/gnupg-devel/2016-October/031899.html
        printf "allow-loopback-pinentry\n" >>"$keyhome/gpg-agent.conf"
        "$CHMOD" 0700 "$keyhome/gpg-agent.conf" ||
	    die "cannot set keychain directory mode"
	"$CHOWN" $EUID "$keyhome" ||
	    die "cannot set keychain directory owner"
        "$CHMOD" 0700 "$keyhome" ||
	    die "cannot set keychain directory mode"

    }
    
    export GNUPGHOME="$keyhome"
}

# import <keyfile 
function import_key() {
    "$GPG" $COMMON --import ||
	die "import failed"
}

# Prints the ID of the first public key found
function firstid() {
    "$GPG" $COMMON --list-keys --with-colons |
        while IFS=: read -r type x x x id x; do
            [[ "$type" == "pub" ]] && printf "%s\n" "$id"
        done 
}

# Encrypts stdin to stdout, using the specified key
function encrypt() {
    local recipient=${1?you must provide a recipient name}
    "$GPG" $COMMON --encrypt --output - --recipient "$recipient" ||
	die "encryption failed"
}

# Decrypts stdin to stdout, using the implicit key set by the
# encrypted stream.
function decrypt() {
    "$GPG" $COMMON "${passphrase_opt[@]}" --decrypt --output - ||
	die "decryption failed"
}

# Just prints usage to stderr
usage() {
    # Avoiding the use of external commands like cat, basename. 
    copyout <<'USAGE' >&2;
USAGE:

Before anything else, you need a keychain directory.  You *can* use
the default location used by GnuPG but this may interfere with other
keys being used by the same user account. For encrypting at least,
you're advised to select another path, either setting it beforehand
with the `GNUPGHOME` environment variable, or overriding it with the
`-k` option.  When `-k` is supplied, the script will attempt to create
the supplied `<path>` if not present, and make it unreadable by all
except the current effective user. Otherwise the keychain directory is
assumed to be set up already.

Given that, these are the basic operations.


    gpgwrapper -i [ -r <keyid> ] [ -k <path> ]

Imports a GPG key read on stdin into the keychain.  You can use this
to import a key exported from another GPG keychain. (Note, the trust
model is `always`, so this won't explicitly mark it trusted, because
all keys are trusted.) 


    gpgwrapper -e [ -r <keyid> ] [ -k <path> ]

Encrypts stdin to stdout using a public key from the keychain
identified by `<keyid>` (it defaults to using the first key listed if
the `-r` option is omitted.)


    gpgwrapper -d [ -k <path> ]

Decrypts stdin to stdout using the private key identified by the
encrypted stream, which must be in the keychain.


    gpgwrapper -v

Prints out version information for this script and GPG.


    gpgwrapper -h
        
Prints this usage.


USAGE
    # Keep this outside the USAGE heredoc, so it is not clobbered by
    # the usage-inserter.
    warn "For more information, see: $PROJECT_URL"
}

function version_warning() {
        copyout >&2 <<EOF
WARNING: gpg version < 2.1.11 is not supported.

Please ensure $GPG is a supported version, or amend this script's
GPG variable to point to one. See guidance here:

    $PROJECT_URL

EOF
}

# Parse the options
while getopts "deihk:p:r:v" OPTION
do
    case "$OPTION" in
        d|e|i|h|v)
            [[ -z "$operation" ]] || die "can only use one of -d -e -i -h or -v"
            operation=$OPTION
            ;;

        k)
            sethome "$OPTARG"
            ;;

        r)
            # If this is unset, default is to use output of firstid
            recipient="$OPTARG"
            ;;

        p)
            # Get passphrase from somewhere
            if [[ -f "$OPTARG" ]]; then
                passphrase_opt=(--passphrase-file "$OPTARG")
            elif [[ "$OPTARG" =~ ^[0-9]+$ ]]; then
                passphrase_opt=(--passphrase-fd "$OPTARG")
	    else
                die "-p option argument is neither a file nor numeric"
            fi
            ;;

        *)
            usage
            exit 1
            ;;
    esac
done

# Remove the options from the argument list
shift $((OPTIND-1))

# Warn if gpg version is < 2.1.11. Continue in any case, as -h or -v
# options may be supplied. The use of --pinentry-mode will cause an
# error if gpg is invoked to do anything else.
if [[ "$GNUPG_VERSION" =~ ^gpg\ \(GnuPG\)\ ([0-9.]+) ]]; then
    case "${BASH_REMATCH[1]}" in
	1.*|2.1.?|2.1.10)
	    version_warning;;
    esac
else
    version_warning
fi

# Help?
if [[ "$operation" == "h" ]]; then
    usage
    exit 0
fi

# Version info?
if [[ "$operation" == "v" ]]; then
    copyout <<EOF
VERSION: $VERSION

GnuPG:
$GNUPG_VERSION

EOF
    exit 0
fi


# Validate the remaining options
if [[ $# != 0 ]]; then
    usage
    die "superfluous parameters were supplied"
fi

# Execute the appropriate action
case "$operation" in
    d) decrypt; exit;;
    e) encrypt "${recipient:-$(firstid)}"; exit;;
    i) import_key; exit;;
esac

warn "Use the -h option for usage information."
die "you must supply one of the options -d -e -i -v or -h."
